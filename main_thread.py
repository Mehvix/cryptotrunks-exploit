import threading
import requests
import logging
import random
import json
import time
import os


THREAD_COUNT = 4
ADDY = "0xeeC384Cdef3aD975EdF1D2f6C1dC9a4b1fEEBF74"
FOUT = "thread-results-" + ADDY + ".txt"
LOWER = 41820+1
UPPER = 1000000
PROXIES = list(json.load(open("proxies.json")))
random.shuffle(PROXIES)

if os.path.isdir(FOUT) == 0:
    open(FOUT, 'w').write("{")

seeds = list(range(LOWER, UPPER))
seeds.reverse()

print("---")
print(f"Lower:\t\t{str(LOWER)}")
print(f"Upper:\t\t{str(UPPER)}")
print(f"Threads:\t{str(THREAD_COUNT)}")
print("---")


def getData(seed: str, sesh: requests.Session) -> list:
    try:
        url = "https://service.cryptotrunks.co/metadata.json?address=" + ADDY + "&seed=" + seed
        req = sesh.get(url)  # verify=False
        text = str(req.text)
        data = json.loads(text)
        elem = data["elements"]
        return(elem)
    except Exception as error:
        return([f"ERROR: {type(error).__name__}"])


def createSession() -> requests.Session:
    session = requests.Session()
    proxy = PROXIES.pop()
    session.proxies = {"http://": proxy, "https://": proxy}
    return session


def generate(thread: int) -> None:
    session = createSession()
    while(seeds):
        # if given error, gen new session
        seed = seeds.pop()
        data = getData(str(seed), session)

        print(f"{thread} :: Seed {seed} - {data}")

        value = str.replace(str(data), '\'', '"')
        json_data = f'\t"{seed}": {value},'
        logging.info(json_data)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, filename="logfile.json",
                        filemode="a+", format="%(message)s")
    # disables request's logging
    logging.getLogger("urllib3").propagate = False

    threads = []

    for i in range(1, THREAD_COUNT+1):
        thread = threading.Thread(
            target=generate, kwargs={"thread": i})
        threads.append(thread)

    for t in threads:
        t.start()

    for t in threads:
        # offset starts to prevent errors
        time.sleep(1.0/THREAD_COUNT)
        t.join()

    print("Done!")
